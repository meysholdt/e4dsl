/*
 * generated by Xtext
 */
package org.eclipse.e4.ui.model.workbench.ui.outline;

import java.util.List;

import org.eclipse.e4.ui.model.workbench.e4WorkbenchXtext.Application;
import org.eclipse.e4.ui.model.workbench.e4WorkbenchXtext.Import;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.IImageHelper;
import org.eclipse.xtext.ui.editor.outline.ContentOutlineNode;
import org.eclipse.xtext.ui.editor.outline.transformer.AbstractDeclarativeSemanticModelTransformer;

import com.google.inject.Inject;
import com.google.inject.internal.Lists;

/**
 * customization of the default outline structure
 * 
 */
public class TextualWorkbenchTransformer extends
		AbstractDeclarativeSemanticModelTransformer {
	@Inject
	private IImageHelper imageHelper;

	public ContentOutlineNode createNode(Application module,
			ContentOutlineNode outlineParentNode) {
		ContentOutlineNode result = super.createNode(module, outlineParentNode);
		if (!module.getImports().isEmpty()) {
			ContentOutlineNode imports = new ContentOutlineNode(
					"import declarations");
			imports.setImage(imageHelper.getImage("impc_obj.gif"));
			result.getChildren().add(imports);
			for (Import imp : module.getImports())
				transformSemanticNode(imp, imports);
		}
		return result;
	}

	public List<EObject> getChildren(Application app) {
		List<EObject> children = Lists.newArrayList();
		for (EObject o : app.eContents())
			if (!(o instanceof Import))
				children.add(o);
		return children;
	}
}
