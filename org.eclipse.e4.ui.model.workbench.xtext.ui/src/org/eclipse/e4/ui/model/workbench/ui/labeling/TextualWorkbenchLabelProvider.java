/*
 * generated by Xtext
 */
package org.eclipse.e4.ui.model.workbench.ui.labeling;

import org.eclipse.e4.ui.model.workbench.e4WorkbenchXtext.ApplicationElement;
import org.eclipse.e4.ui.model.workbench.e4WorkbenchXtext.Command;
import org.eclipse.e4.ui.model.workbench.e4WorkbenchXtext.Handler;
import org.eclipse.e4.ui.model.workbench.e4WorkbenchXtext.KeyBinding;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects.
 * 
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class TextualWorkbenchLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public TextualWorkbenchLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	public String text(ApplicationElement ele) {
		EStructuralFeature label = ele.eClass().getEStructuralFeature("label");
		if (label != null && ele.eIsSet(label))
			return ele.eGet(label).toString();
		if (ele.getId() != null)
			return ele.getId();
		return ele.eClass().getName();
	}

	public String text(Handler ele) {
		String java = null;
		if (ele.getURIRef() != null) {
			java = ele.getURIRef().getCanonicalName();
			int i = java.lastIndexOf('.');
			if (i >= 0)
				java = java.substring(i + 1, java.length());
		}
		String cmd = ele.getCommand() != null ? ele.getCommand().getId() : null;
		if (java != null && cmd != null)
			return java + " <- " + cmd;
		if (java != null)
			return java;
		if (cmd != null)
			return cmd;
		return ele.eClass().getName();
	}

	public String text(KeyBinding ele) {
		String key = ele.getKeySequence();
		String cmd = ele.getCommand() != null ? ele.getCommand().getId() : null;
		if (key != null && cmd != null)
			return key + " -> " + cmd;
		if (key != null)
			return key;
		if (cmd != null)
			return cmd;
		return ele.eClass().getName();
	}

	public String text(Command ele) {
		if (ele.getId() != null && ele.getCommandName() != null)
			return ele.getId() + " \"" + ele.getCommandName() + "\"";
		if (ele.getId() != null)
			return ele.getId();
		if (ele.getCommandName() != null)
			return "\"" + ele.getCommandName() + "\"";
		return ele.eClass().getName();
	}

	/*
	 * String image(MyModel ele) { return "MyModel.gif"; }
	 */
}
