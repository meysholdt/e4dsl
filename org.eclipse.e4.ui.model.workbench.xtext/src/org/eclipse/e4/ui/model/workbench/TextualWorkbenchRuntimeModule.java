/*
 * generated by Xtext
 */
package org.eclipse.e4.ui.model.workbench;

import org.eclipse.e4.ui.model.workbench.names.TextualWorkbenchNameProvider;
import org.eclipse.e4.ui.model.workbench.scoping.NamespaceAwareScopeProvider;
import org.eclipse.e4.ui.model.workbench.scoping.TextualWorkbenchGlobalScopeProvider;
import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.parsetree.reconstr.IParseTreeConstructor;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.scoping.IScopeProvider;

import com.google.inject.Binder;
import com.google.inject.name.Names;

/**
 * Use this class to register components to be used within the IDE.
 */
public class TextualWorkbenchRuntimeModule extends
		AbstractTextualWorkbenchRuntimeModule {

	@Override
	public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return TextualWorkbenchNameProvider.class;
	}

	@Override
	public Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return TextualWorkbenchGlobalScopeProvider.class;
	}

	public java.lang.Class<? extends IValueConverterService> bindIValueConverterService() {
		return E4ValueConverter.class;
	};

	@Override
	public void configureIScopeProviderDelegate(Binder binder) {
		binder.bind(IScopeProvider.class)
				.annotatedWith(
						Names.named("org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider.delegate"))
				.to(NamespaceAwareScopeProvider.class);
	}

	@Override
	public Class<? extends IParseTreeConstructor> bindIParseTreeConstructor() {
		return FixedParseTreeConstructor.class;
	}
}
