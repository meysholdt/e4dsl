/*
 * generated by Xtext
 */
package org.eclipse.e4.ui.model.workbench.formatting;

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.util.Pair;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an
 * example
 */
public class TextualWorkbenchFormatter extends AbstractDeclarativeFormatter {

	@Override
	protected void configureFormatting(FormattingConfig c) {
		org.eclipse.e4.ui.model.workbench.services.TextualWorkbenchGrammarAccess f = (org.eclipse.e4.ui.model.workbench.services.TextualWorkbenchGrammarAccess) getGrammarAccess();
		for (Pair<Keyword, Keyword> pair : f.findKeywordPairs("{", "}")) {
			c.setIndentation(pair.getFirst(), pair.getSecond());
			c.setLinewrap(1).after(pair.getFirst());
			c.setLinewrap(1).before(pair.getSecond());
			c.setLinewrap(1).after(pair.getSecond());
		}
		for (Keyword symbol : f.findKeywords(".", "=")) {
			c.setNoLinewrap().around(symbol);
			c.setNoSpace().around(symbol);
		}
		for (Keyword symbol : f.findKeywords("(")) {
			c.setNoLinewrap().after(symbol);
			c.setNoSpace().after(symbol);
		}
		for (Keyword k : f.findKeywords(")", ",")) {
			c.setNoSpace().before(k);
			c.setNoLinewrap().before(k);
		}
		for (Keyword k : f.findKeywords(";")) {
			c.setNoSpace().before(k);
			c.setNoLinewrap().before(k);
			c.setLinewrap(1).after(k);
		}
		c.setLinewrap(2).before(f.getApplicationAccess().getOutputKeyword_2());
		c.setLinewrap(2).before(f.getApplicationAccess().getApplicationKeyword_5());
		c.setNoSpace().after(f.getWindowAccess().getDimensionKeyword_7_0());
		c.setNoSpace().after(f.getWindowAccess().getPositionKeyword_6_0());
	}
}
